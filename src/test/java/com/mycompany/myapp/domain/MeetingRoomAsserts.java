package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MeetingRoomAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingRoomAllPropertiesEquals(MeetingRoom expected, MeetingRoom actual) {
        assertMeetingRoomAutoGeneratedPropertiesEquals(expected, actual);
        assertMeetingRoomAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingRoomAllUpdatablePropertiesEquals(MeetingRoom expected, MeetingRoom actual) {
        assertMeetingRoomUpdatableFieldsEquals(expected, actual);
        assertMeetingRoomUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingRoomAutoGeneratedPropertiesEquals(MeetingRoom expected, MeetingRoom actual) {
        assertThat(expected)
            .as("Verify MeetingRoom auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingRoomUpdatableFieldsEquals(MeetingRoom expected, MeetingRoom actual) {
        assertThat(expected)
            .as("Verify MeetingRoom relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getCapacity()).as("check capacity").isEqualTo(actual.getCapacity()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingRoomUpdatableRelationshipsEquals(MeetingRoom expected, MeetingRoom actual) {
        assertThat(expected)
            .as("Verify MeetingRoom relationships")
            .satisfies(e -> assertThat(e.getReservations()).as("check reservations").isEqualTo(actual.getReservations()));
    }
}
